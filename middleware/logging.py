"""
–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–æ—Ç–∞
"""
import logging
from typing import Callable, Dict, Any, Awaitable
from datetime import datetime
from aiogram import BaseMiddleware
from aiogram.types import Message, CallbackQuery

from storage.database import Database

logger = logging.getLogger(__name__)


class LoggingMiddleware(BaseMiddleware):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞"""
    
    async def __call__(
        self,
        handler: Callable[[Message | CallbackQuery, Dict[str, Any]], Awaitable[Any]],
        event: Message | CallbackQuery,
        data: Dict[str, Any]
    ) -> Any:
        """–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –∏ –¥–µ—Ç–∞–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        
        start_time = datetime.now()
        user_id = event.from_user.id
        username = event.from_user.username or "Unknown"

        if isinstance(event, Message):
            event_type = "message"
            event_data = {
                "text": event.text[:100] if event.text else None,
                "content_type": event.content_type,
                "chat_type": event.chat.type
            }
        elif isinstance(event, CallbackQuery):
            event_type = "callback"
            event_data = {
                "data": event.data,
                "message_id": event.message.message_id if event.message else None
            }
        else:
            event_type = "unknown"
            event_data = {}
        
        logger.info(f"[{event_type.upper()}] User {user_id} ({username}): {event_data}")
        
        #–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
        db = Database()
        await db.update_statistics("total_requests")
        
        try:
            result = await handler(event, data)

            end_time = datetime.now()
            processing_time = (end_time - start_time).total_seconds()
            
            logger.info(f"[SUCCESS] Processed {event_type} from user {user_id} "
                       f"in {processing_time:.3f}s")
            
            return result
            
        except Exception as e:
            #–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–∏—à–±–æ–∫ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ
            end_time = datetime.now()
            processing_time = (end_time - start_time).total_seconds()
            
            logger.error(f"[ERROR] Failed to process {event_type} from user {user_id} "
                        f"after {processing_time:.3f}s: {e}")
            
            #–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∏—à–±–∫–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            error_message = ("üòû –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å.\n"
                           "üòû Unfortunately an error occurred while processing your request.")
            
            try:
                if isinstance(event, Message):
                    await event.answer(error_message)
                elif isinstance(event, CallbackQuery):
                    await event.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ / Error occurred", show_alert=True)
            except:
                logger.error(f"Failed to send error message to user {user_id}")

            raise


class CommandLoggerMiddleware(BaseMiddleware):
    """–ú–∏–¥–ª–≤–∞—Ä–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    
    async def __call__(
        self,
        handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]],
        event: Message,
        data: Dict[str, Any]
    ) -> Any:
        
        #–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
        if not event.text or not event.text.startswith('/'):
            return await handler(event, data)
        
        command = event.text.split()[0].lower()
        user_id = event.from_user.id

        logger.info(f"Command usage: {command} by user {user_id}")
        
        #–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        db = Database()
        stat_name = f"command_{command.replace('/', '')}_usage"
        await db.update_statistics(stat_name)
        
        return await handler(event, data)
