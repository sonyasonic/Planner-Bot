"""
–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
"""
import logging
from typing import Callable, Dict, Any, Awaitable, List
from aiogram import BaseMiddleware
from aiogram.types import Message, CallbackQuery

from storage.database import Database

logger = logging.getLogger(__name__)


class AuthMiddleware(BaseMiddleware):
    """–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"""
    
    def __init__(self, admin_ids: List[int]):
        super().__init__()
        self.admin_ids = admin_ids
    
    async def __call__(
        self,
        handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]],
        event: Message | CallbackQuery,
        data: Dict[str, Any]
    ) -> Any:
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"""
        
        user_id = event.from_user.id
        db = Database()
        
        #–ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if await db.is_user_banned(user_id):
            logger.warning(f"Banned user {user_id} attempted to use bot")
            
            #–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
            if isinstance(event, Message):
                await event.answer("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞.\n"
                                 "üö´ You are banned and cannot use this bot.")
            elif isinstance(event, CallbackQuery):
                await event.answer("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã / You are banned", show_alert=True)
            
            return
        
        #–¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–∞–∑—É
        data["user_id"] = user_id
        data["is_admin"] = user_id in self.admin_ids
        
        #–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        username = event.from_user.username
        await db.add_user(user_id, username)

        if isinstance(event, Message):
            logger.info(f"User {user_id} ({username}) sent message: {event.text[:50]}...")
        elif isinstance(event, CallbackQuery):
            logger.info(f"User {user_id} ({username}) pressed button: {event.data}")

        return await handler(event, data)


class AdminOnlyMiddleware(BaseMiddleware):
    """–ú–∏–¥–ª–≤–∞—Ä–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    
    def __init__(self, admin_ids: List[int]):
        super().__init__()
        self.admin_ids = admin_ids
    
    async def __call__(
        self,
        handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]],
        event: Message | CallbackQuery,
        data: Dict[str, Any]
    ) -> Any:
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
        
        user_id = event.from_user.id
        
        if user_id not in self.admin_ids:
            logger.warning(f"Non-admin user {user_id} tried to access admin function")
            
            #–£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Ç–æ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
            if isinstance(event, Message):
                await event.answer("üîí –£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.\n"
                                 "üîí You don't have permission to use this command.")
            elif isinstance(event, CallbackQuery):
                await event.answer("üîí –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω / Access denied", show_alert=True)
            
            return
        
        #–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω, —Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        data["is_admin"] = True
        return await handler(event, data)
