"""
–§–∏–ª—å—Ç—Ä—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –∞–¥–º–∏–Ω–∞
"""
import logging
from typing import Union
from aiogram.filters import BaseFilter
from aiogram.types import Message, CallbackQuery

from config import Config

logger = logging.getLogger(__name__)


class AdminFilter(BaseFilter):
    """–§–∏–ª—å—Ç—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑—Ä–µ—à–∞–µ—Ç –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º"""
    
    def __init__(self):
        self.config = Config()
        self.admin_ids = self.config.ADMIN_IDS
    
    async def __call__(self, event: Union[Message, CallbackQuery]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
        user_id = event.from_user.id
        is_admin = user_id in self.admin_ids
        
        if not is_admin:
            logger.warning(f"Non-admin user {user_id} tried to access admin function")
            
            #–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
            access_denied_text = (
                "üîí –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.\n"
                "üîí You don't have permission to use this command."
            )
            
            try:
                if isinstance(event, Message):
                    await event.answer(access_denied_text)
                elif isinstance(event, CallbackQuery):
                    await event.answer("üîí –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω / Access denied", show_alert=True)
            except Exception as e:
                logger.error(f"Error sending access denied message: {e}")
        
        return is_admin

