"""
–ò–Ω–ª–∞–π–Ω –∏ —Ä–µ–ø–ª–∞–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –±–æ—Ç–∞
"""
from typing import List, Dict, Any
from aiogram.types import (
    ReplyKeyboardMarkup, 
    KeyboardButton, 
    InlineKeyboardMarkup, 
    InlineKeyboardButton
)

from localization.messages import get_message
from config import Config


def get_main_keyboard(language: str = "ru") -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é"""
    config = Config()
    
    keyboard = [
        [
            KeyboardButton(text=get_message("btn_my_tasks", language)),
            KeyboardButton(text=get_message("btn_add_task", language))
        ],
        [
            KeyboardButton(text=get_message("btn_get_quote", language)),
            KeyboardButton(text=get_message("btn_language", language))
        ]
    ]

    return ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
        one_time_keyboard=False
    )


def get_language_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    keyboard = [
        [
            InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru"),
            InlineKeyboardButton(text="üá∫üá∏ English", callback_data="lang_en")
        ]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_tasks_keyboard(language: str = "ru", has_tasks: bool = False) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á"""
    keyboard = []

    keyboard.append([
        InlineKeyboardButton(
            text=get_message("btn_add_task", language),
            callback_data="add_task"
        )
    ])

    if has_tasks:
        keyboard.append([
            InlineKeyboardButton(
                text=get_message("btn_manage_tasks", language),
                callback_data="task_list"
            )
        ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_task_actions_keyboard(tasks: List[Dict[str, Any]], language: str = "ru") -> InlineKeyboardMarkup:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏"""
    keyboard = []
    
    for i, task in enumerate(tasks[:10], 1):
        status_emoji = "‚úÖ" if task["completed"] else "‚≠ï"
        task_title = task["title"][:20] + "..." if len(task["title"]) > 20 else task["title"]

        row = []
        
        if not task["completed"]:
            row.append(InlineKeyboardButton(
                text=f"{status_emoji} {task_title}",
                callback_data=f"task_complete_{i}"
            ))
        else:
            row.append(InlineKeyboardButton(
                text=f"{status_emoji} {task_title}",
                callback_data="task_already_completed"
            ))
        
        row.append(InlineKeyboardButton(
            text="üóëÔ∏è",
            callback_data=f"task_delete_{i}"
        ))
        
        keyboard.append(row)

    keyboard.append([
        InlineKeyboardButton(
            text=get_message("btn_back", language),
            callback_data="back_to_tasks"
        )
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_admin_keyboard(language: str = "ru") -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    keyboard = [
        [
            InlineKeyboardButton(
                text="üìä Statistics", 
                callback_data="admin_stats"
            ),
            InlineKeyboardButton(
                text="üì¢ Broadcast", 
                callback_data="admin_broadcast"
            )
        ],
        [
            InlineKeyboardButton(
                text="üö´ Ban User", 
                callback_data="admin_ban"
            ),
            InlineKeyboardButton(
                text="‚úÖ Unban User", 
                callback_data="admin_unban"
            )
        ],
        [
            InlineKeyboardButton(
                text="üë• User List", 
                callback_data="admin_users"
            ),
            InlineKeyboardButton(
                text="üìã All Tasks", 
                callback_data="admin_tasks"
            )
        ]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_task_confirm_keyboard(action: str, task_id: str, language: str = "ru") -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π"""
    if action == "delete":
        confirm_text = "üóëÔ∏è Confirm Delete" if language == "en" else "üóëÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ"
        cancel_text = "‚ùå Cancel" if language == "en" else "‚ùå –û—Ç–º–µ–Ω–∞"
    elif action == "complete":
        confirm_text = "‚úÖ Mark Complete" if language == "en" else "‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π"
        cancel_text = "‚ùå Cancel" if language == "en" else "‚ùå –û—Ç–º–µ–Ω–∞"
    else:
        confirm_text = "‚úÖ Confirm" if language == "en" else "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
        cancel_text = "‚ùå Cancel" if language == "en" else "‚ùå –û—Ç–º–µ–Ω–∞"
    
    keyboard = [
        [
            InlineKeyboardButton(
                text=confirm_text,
                callback_data=f"confirm_{action}_{task_id}"
            ),
            InlineKeyboardButton(
                text=cancel_text,
                callback_data="cancel_action"
            )
        ]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)
