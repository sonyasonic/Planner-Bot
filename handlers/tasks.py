"""
–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–º–∏
"""
import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from localization.messages import get_message, get_user_language
from utils.keyboards import get_tasks_keyboard, get_task_actions_keyboard
from storage.database import Database
from states.task_states import TaskStates

router = Router()
logger = logging.getLogger(__name__)


@router.message(Command("tasks"))
async def view_tasks_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /tasks, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    lang = get_user_language(user_id)
    
    db = Database()
    tasks = await db.get_user_tasks(user_id)
    
    if not tasks:
        text = get_message("no_tasks", lang)
        await message.answer(text, reply_markup=get_tasks_keyboard(lang))
        return
    
    #–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
    tasks_text = get_message("your_tasks", lang) + "\n\n"
    for i, task in enumerate(tasks, 1):
        status = "‚úÖ" if task["completed"] else "‚≠ï"
        priority_emoji = {"high": "üî¥", "medium": "üü°", "low": "üü¢"}.get(task.get("priority", "medium"), "üü°")
        tasks_text += f"{i}. {status} {priority_emoji} {task['title']}\n"
        if task["description"]:
            tasks_text += f"   üìù {task['description']}\n"
        tasks_text += f"   üìÖ {task['created_at']}\n\n"
    
    await message.answer(
        tasks_text,
        reply_markup=get_tasks_keyboard(lang, len(tasks) > 0)
    )
    
    logger.info(f"User {user_id} viewed {len(tasks)} tasks")


@router.message(Command("addtask"))
async def add_task_command(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /addtask, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É"""
    user_id = message.from_user.id
    lang = get_user_language(user_id)
    
    text = get_message("enter_task_title", lang)
    await message.answer(text)
    await state.set_state(TaskStates.waiting_for_title)
    
    logger.info(f"User {user_id} started adding new task")


@router.message(F.text.in_(["‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", "‚ûï Add Task"]))
async def add_task_button(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
    await add_task_command(message, state)


@router.message(TaskStates.waiting_for_title)
async def process_task_title(message: Message, state: FSMContext):
    """–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
    user_id = message.from_user.id
    lang = get_user_language(user_id)
    
    title = message.text.strip()
    if not title:
        text = get_message("invalid_task_title", lang)
        await message.answer(text)
        return
    
    #–°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    await state.update_data(title=title)
    
    #–ü—Ä–æ—Å–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    text = get_message("enter_task_description", lang)
    await message.answer(text)
    await state.set_state(TaskStates.waiting_for_description)
    
    logger.info(f"User {user_id} entered task title: {title}")


@router.message(TaskStates.waiting_for_description)
async def process_task_description(message: Message, state: FSMContext):
    """–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
    user_id = message.from_user.id
    lang = get_user_language(user_id)
    
    description = message.text.strip()
    
    #–°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    await state.update_data(description=description)
    
    #–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏
    text = get_message("enter_task_priority", lang)
    await message.answer(text)
    await state.set_state(TaskStates.waiting_for_priority)
    
    logger.info(f"User {user_id} entered task description")


@router.message(TaskStates.waiting_for_priority)
async def process_task_priority(message: Message, state: FSMContext):
    """–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏"""
    user_id = message.from_user.id
    lang = get_user_language(user_id)
    
    priority_text = message.text.strip().lower()
    
    #–ü—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å —á—Ç–æ-—Ç–æ –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
    priority_map = {
        "–Ω–∏–∑–∫–∏–π": "low", "low": "low", "1": "low",
        "—Å—Ä–µ–¥–Ω–∏–π": "medium", "medium": "medium", "2": "medium", 
        "–≤—ã—Å–æ–∫–∏–π": "high", "high": "high", "3": "high"
    }
    
    priority = priority_map.get(priority_text, "medium")
    
    #–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    title = data.get("title")
    description = data.get("description", "")
    
    #–°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É —Ü–µ–ª–∏–∫–æ–º
    db = Database()
    task_id = await db.add_task(user_id, title, description, priority)

    await state.clear()
    
    #–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ
    text = get_message("task_added", lang).format(title=title)
    await message.answer(text, reply_markup=get_tasks_keyboard(lang, True))
    
    logger.info(f"User {user_id} added task {task_id}: {title} with priority {priority}")


@router.callback_query(F.data == "view_tasks")
async def view_tasks_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback"""
    await view_tasks_handler(callback.message)
    await callback.answer()


@router.callback_query(F.data.startswith("task_"))
async def task_action_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∑–∞–¥–∞—á"""
    user_id = callback.from_user.id
    lang = get_user_language(user_id)
    data_parts = callback.data.split("_")
    
    if len(data_parts) < 2:
        await callback.answer()
        return
    
    action = data_parts[1]
    
    db = Database()
    tasks = await db.get_user_tasks(user_id)
    
    if action == "list":
        #–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        if not tasks:
            text = get_message("no_tasks", lang)
            await callback.message.edit_text(text)
            await callback.answer()
            return
        
        text = get_message("select_task_action", lang)
        keyboard = get_task_actions_keyboard(tasks, lang)
        await callback.message.edit_text(text, reply_markup=keyboard)
    
    elif action == "complete" and len(data_parts) >= 3:
        #–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á—É
        try:
            task_index = int(data_parts[2]) - 1
            if 0 <= task_index < len(tasks):
                task = tasks[task_index]
                await db.update_task_status(task["id"], True)
                text = get_message("task_completed", lang).format(title=task["title"])
                await callback.message.edit_text(text)
                logger.info(f"User {user_id} completed task {task['id']}")
            else:
                await callback.answer("Task not found")
        except (ValueError, IndexError):
            await callback.answer("Invalid task number")
    
    elif action == "delete" and len(data_parts) >= 3:
        #–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞—á—É
        try:
            task_index = int(data_parts[2]) - 1
            if 0 <= task_index < len(tasks):
                task = tasks[task_index]
                await db.delete_task(task["id"])
                text = get_message("task_deleted", lang).format(title=task["title"])
                await callback.message.edit_text(text)
                logger.info(f"User {user_id} deleted task {task['id']}")
            else:
                await callback.answer("Task not found")
        except (ValueError, IndexError):
            await callback.answer("Invalid task number")
    
    await callback.answer()


@router.message(F.text.in_(["üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏", "üìù Manage Tasks"]))
async def manage_tasks_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º–∏ –∑–∞–¥–∞—á–∞–º–∏"""
    user_id = message.from_user.id
    lang = get_user_language(user_id)
    
    text = get_message("task_management", lang)
    await message.answer(text, reply_markup=get_tasks_keyboard(lang))
